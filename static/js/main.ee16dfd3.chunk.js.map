{"version":3,"sources":["components/Selector.js","actions/index.js","components/Posts.js","components/App.js","reducers/index.js","store/configureStore.js","sagas/index.js","index.js"],"names":["Selector","redditValue","options","onSelect","value","onChange","e","target","map","option","key","requestPosts","type","receivePosts","posts","receivedAt","Date","setMilliseconds","Posts","post","i","title","connect","selectedReddit","postsByReddit","dispatch","selectRedditDispatch","invalidateRedditDispatch","isFetching","items","lastUpdated","selectedValue","toLocaleTimeString","onClick","length","initialState","state","action","combineReducers","configureStore","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","composeWithDevTools","applyMiddleware","runSaga","run","fetchPosts","invalidateReddit","nextRedditChange","startup","root","selectedRedditValueSelector","postsByRedditSelector","fetchPostsAPI","axios","get","then","res","data","children","child","put","actions","call","take","select","prevReddit","newReddit","fork","selectedRedditValue","all","store","rootSaga","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee16dfd3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Selector = ({ redditValue,options,onSelect }) => {\r\n\r\n    const handleSelectorOnChange = (e) => {\r\n        onSelect(e.target.value)\r\n      }\r\n\r\n  return (\r\n    <div>\r\n      <h1>{redditValue}</h1>\r\n      <select value={redditValue}  onChange={handleSelectorOnChange} >\r\n        {options.map((option) => {\r\n            return (\r\n                <option value={option} key={option}>\r\n                    {option}\r\n                </option>\r\n            )\r\n        })}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Selector\r\n","export const REQUEST_POSTS = \"REQUEST_POSTS\";\r\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\r\nexport const SELECT_REDDIT_VALUE = \"SELECT_REDDIT_VALUE\";\r\nexport const INVALIDATE_REDDIT = \"INVALIDATE_REDDIT\";\r\n\r\nexport const selectReddit = (redditValue) => {\r\n  return {\r\n    type: SELECT_REDDIT_VALUE,\r\n    redditValue,\r\n  };\r\n};\r\n\r\nexport const requestPosts = (redditValue) => {\r\n  return {\r\n    type: REQUEST_POSTS,\r\n    redditValue,\r\n  };\r\n};\r\n\r\nexport const receivePosts = (redditValue, posts) => {\r\n  return {\r\n    type: RECEIVE_POSTS,\r\n    redditValue,\r\n    posts,\r\n    receivedAt: new Date().setMilliseconds(0),\r\n  };\r\n};\r\n\r\nexport const invalidateReddit = (redditValue) => {\r\n    return {\r\n        type: INVALIDATE_REDDIT,\r\n        redditValue\r\n    }\r\n}","import React from 'react'\r\n\r\nconst Posts = ({ posts }) => {\r\n    return (\r\n        <ul>\r\n            {posts.map((post,i) => <li key={i}>{post.title}</li>)}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Posts","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Selector from \"./Selector\";\nimport { selectReddit, invalidateReddit } from \"../actions\";\nimport Posts from \"./Posts\";\n\nconst App = ({\n  selectRedditDispatch,\n  selectedReddit,\n  isFetching,\n  items,\n  lastUpdated,\n  invalidateRedditDispatch,\n}) => {\n  const handleOnSelect = (selectedValue) => {\n    selectRedditDispatch(selectedValue);\n  };\n\n  const handleRefreshClick = () => {\n    invalidateRedditDispatch(selectedReddit);\n  };\n\n  return (\n    <div>\n      <Selector\n        redditValue={selectedReddit}\n        onSelect={handleOnSelect}\n        options={[\"reactjs\", \"reduxjs\", \"javascript\"]}\n      />\n      <p>\n        {lastUpdated && (\n          <span>\n            Last updated at {new Date(lastUpdated).toLocaleTimeString()}\n          </span>\n        )}\n        {!isFetching && (\n          <button onClick={handleRefreshClick}>\n            Refresh\n          </button>\n        )}\n      </p>\n      {isFetching && items.length === 0 && <h2>Loading...</h2>}\n      {isFetching && items.length > 0 && <h2>Refreshing...</h2>}\n      {!isFetching && items.length === 0 && <h2>Empty</h2>}\n      {!isFetching && items.length > 0 && (\n        <div>\n          <Posts posts={items} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ selectedReddit, postsByReddit }) => {\n  return {\n    selectedReddit,\n    ...postsByReddit[selectedReddit],\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    selectRedditDispatch: (value) => dispatch(selectReddit(value)),\n    invalidateRedditDispatch: (value) => dispatch(invalidateReddit(value)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from \"redux\";\r\n\r\nimport * as actions from \"../actions\";\r\n\r\nconst selectedReddit = (state = \"reactjs\", action) => {\r\n  switch (action.type) {\r\n    case actions.SELECT_REDDIT_VALUE:\r\n      return action.redditValue;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  isFetching: false,\r\n  items: [],\r\n};\r\n\r\nconst posts = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case actions.REQUEST_POSTS:\r\n          return {\r\n            ...state,\r\n            isFetching: true,\r\n          };\r\n        case actions.RECEIVE_POSTS:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                items: action.posts,\r\n                lastUpdated: action.receivedAt\r\n            }\r\n        default:\r\n            return state\r\n      }\r\n}\r\n\r\nconst postsByReddit = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case actions.REQUEST_POSTS:\r\n    case actions.RECEIVE_POSTS:\r\n        return {\r\n            ...state,\r\n            [action.redditValue]: posts(state[action.redditValue],action)\r\n        }\r\n    default:\r\n        return state\r\n  }\r\n};\r\n\r\nexport default combineReducers({\r\n  selectedReddit,\r\n  postsByReddit\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"../reducers\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  return {\r\n    ...createStore(\r\n      rootReducer,\r\n      composeWithDevTools(applyMiddleware(sagaMiddleware))\r\n    ),\r\n    runSaga: sagaMiddleware.run,\r\n  };\r\n};\r\n\r\nexport default configureStore\r\n","import { all, select, fork, put, call, take } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nimport * as actions from \"../actions\";\r\n\r\nconst selectedRedditValueSelector = (state) => state.selectedReddit;\r\n\r\nconst postsByRedditSelector = (state) => state.postsByReddit;\r\n\r\nconst fetchPostsAPI = (redditValue) => {\r\n  return axios\r\n    .get(`https://www.reddit.com/r/${redditValue}.json`)\r\n    .then((res) => res.data.data.children.map((child) => child.data));\r\n};\r\n\r\nfunction* fetchPosts(redditValue) {\r\n  yield put(actions.requestPosts(redditValue));\r\n  const posts = yield call(fetchPostsAPI, redditValue);\r\n  yield put(actions.receivePosts(redditValue, posts));\r\n}\r\n\r\nfunction* invalidateReddit() {\r\n    while(true) {\r\n        const { redditValue } = yield take(actions.INVALIDATE_REDDIT)\r\n        yield call(fetchPosts,redditValue)\r\n    }\r\n}\r\n\r\nfunction* nextRedditChange() {\r\n  while (true) {\r\n    const prevReddit = yield select(selectedRedditValueSelector);\r\n    yield take(actions.SELECT_REDDIT_VALUE);\r\n\r\n    const newReddit = yield select(selectedRedditValueSelector);\r\n    const postsByReddit = yield select(postsByRedditSelector);\r\n    if (prevReddit !== newReddit && !postsByReddit[newReddit]) {\r\n      yield fork(fetchPosts, newReddit);\r\n    }\r\n  }\r\n}\r\n\r\nfunction* startup() {\r\n  const selectedRedditValue = yield select(selectedRedditValueSelector);\r\n  yield fork(fetchPosts, selectedRedditValue);\r\n}\r\n\r\nexport default function* root() {\r\n  yield all([startup(), nextRedditChange(), invalidateReddit()]);\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./components/App\";\nimport configureStore from \"./store/configureStore\";\nimport rootSaga from \"./sagas\";\n\nconst store = configureStore();\nstore.runSaga(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}